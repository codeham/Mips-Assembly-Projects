#Cristian Avina Lopez
#CS 264
#Lab Assignment #4 Arithmetic Instructions

		.data
Prompt:			.asciiz 	"\nThe printed value is: "
PromptH:		.asciiz		"\nThe HIGH register value is "
PromptL:		.asciiz		"\nThe LOW register value is "

		.text

	#$t0 = -4, $t1 = -2^31, $t2 = 2^30, $t3 = 65
		
main:		li 		$t0,	-4				#t0 = 1111.....1100
			li		$t1,	-2147483648		#t1 = 1000.....0000
			li		$t2,	1073741824		#t2 = 0010.....0000
			li		$t3,	65				#t3 = 000...1000001
			
#############################################################			
			srl  	$t4, 	$t0,2			#Decimal value is 1073741823
			
			#Binary value is 001111....11
			
			#$t4 = 2^29 + 2^28 + ... + 2^0
			#The binary value 1111...1100 shifted to the right 2 spaces
			#This loses the 2 0s on the right most bit, then 2 0s
			#are added to the left most bit.
			
			la		$a0,	Prompt			#Prints display msg
			li		$v0,	4
			syscall
			move 	$a0,	$t4				
			li		$v0,	1
			syscall
			
#############################################################			
			sra 	$t4,	$t0,2			#Decimal value is -1
			
			#Binary value is 111....1111
			#sra inserts the sign $t0 sign bits which is 1 to the
			#left most significant bit.
			
			la		$a0,	Prompt			#Prints display msg
			li		$v0,	4
			syscall
			move 	$a0,	$t4				
			li		$v0,	1
			syscall
			
#############################################################						
			sll		$t4,	$t0,1			#Decimal value is -8
			
			#Binary value is 111..11000 
			#sll inserted a 0 to the right most significant bit of $t0 
			
			la		$a0,	Prompt			#Prints display msg
			li		$v0,	4
			syscall
			move 	$a0,	$t4				
			li		$v0,	1
			syscall
			
#############################################################			
			rol		$t4,	$t0,2			#Decimal value is -13
			
			#Binary value is 1111...110011
			#rol brings the 1st two 1s from the left most significant bits of $t0
			#And rotated it to the right, the right most significant bits
			
			la		$a0,	Prompt			#Prints display msg
			li		$v0,	4
			syscall
			move 	$a0,	$t4				
			li		$v0,	1
			syscall
			
#############################################################						
			ror 	$t4,	$t0,2			#Decimal value is 1073741823
			
			#Binary value is 001111....11
			#$t4 = 2^29 + 2^28 + ... + 2^0
			#ror brings the 1st two 1s from the right most significant bits of $t0
			#And rotated it to the left, the left most significant bits
			
			la		$a0,	Prompt			#Prints display msg
			li		$v0,	4
			syscall
			move 	$a0,	$t4				
			li		$v0,	1
			syscall
			
#############################################################						
			xor		$t4,	$t0,$t1			#Decimal value is 2147483644
			
			#Binary value is 0111.....1100

			#$t0 = 1111.....1100
			#$t1 = 1000.....0000
		
			#$t4 = 0111.....1100
			#xor takes the exlcusive or of $t0 and $t1, so for each bit that
			#$t0 and $t1 have in common, the created bit will be 0, and for
			#the bits that different, the created bit will be 1.
			
			la		$a0,	Prompt			#Prints display msg
			li		$v0,	4
			syscall
			move 	$a0,	$t4				
			li		$v0,	1
			syscall
			
#############################################################						
			xor 	$t4, 	$t1,-8			#Decimal value is 2147483640
			
			#Binary value is 0111....11000
			
			#$t1 = 1000....00000
			# -8 = 1111....11000 
			
			#$t4 = 0111....11000
			#xor takes the exlcusive or of $t0 and $t1, so for each bit that
			#$t1 and -8's two's complement binary value have in common, the created bit
			#will be 0, and for the bits that different, the created bit will be 1.
			
			la		$a0,	Prompt			#Prints display msg
			li		$v0,	4
			syscall
			move 	$a0,	$t4				
			li		$v0,	1
			syscall
			
#############################################################						
			add 	$t4,	$t0,$t1			#No Decimal value because overflow
			
			#$t0 = 1111.....1100
			#$t1 = 1000.....0000
			#$t4 = 10111.....1100
			#The left most bit is dropped to fit in the 32 bits
			#Thus $t4 = 0111.....1100
			
			#$t4 overflow in 2â€™s compliment. The two negative values
			#added together and generated a positive value.
			
			la		$a0,	Prompt			#Prints display msg
			li		$v0,	4
			syscall
			move 	$a0,	$t4				
			li		$v0,	1
			syscall

#############################################################			
			addu 	$t4, 	$t0,$t1			#Decimal value is 2147483644

			#Binary value is 0111.....1100
			
			#$t0 = 1111.....1100
			#$t1 = 1000.....0000
			#$t4 = 10111.....1100
			#The left most bit is dropped to fit in the 32 bits
			#Thus $t4 = 0111.....1100
			#$t4 = 2^30 + 2^29 + ... + 2^2
			
			la		$a0,	Prompt			#Prints display msg
			li		$v0,	4
			syscall
			move 	$a0,	$t4				
			li		$v0,	1
			syscall
			
#############################################################			
			mul  	$t4, 	$t1,$t2			#Decimal value is 0
			
			#Binary value is 0000....0000
			
			#   1111.....1100
			# x 1000.....0000
			# ------------------
			#Total value = 0100....0000
			#The value exceeds 32 bits and since mul only stores the latter
			#32 bit values into the LOW, all the values in the LOW will be in 0s
			
			la		$a0,	Prompt			#Prints display msg
			li		$v0,	4
			syscall
			move 	$a0,	$t4				
			li		$v0,	1
			syscall

#############################################################			
			mulo 	$t4,	$t1,$t2			#No Decimal value because overflow
			
			#Binary value overflows
			
			#The products is more than 32 bits, an exception is 
			#generated and the result in Rd is not necessary readable.
			
			la		$a0,	Prompt			#Prints display msg
			li		$v0,	4
			syscall
			move 	$a0,	$t4				
			li		$v0,	1
			syscall

#############################################################			
			mulou 	$t4,	$t0,$t0			#No Decimal value because overflow
			
			#Binary value generated overflow because the left most bits are 1s
			#In an unsigned multiplication, those 1s are not indicator of negative
			#values, but treated as positive value. The value is changed from
			# -4 to 4294967292 during the multiplication, and generate overflow.
			
			la		$a0,	Prompt			#Prints display msg
			li		$v0,	4
			syscall
			move 	$a0,	$t4				
			li		$v0,	1
			syscall

#############################################################
			mulou 	$t4,	$t3,$t3			#Decimal value is 4225
			
			#Binary value is 0001000010000001 = 2^12 + 2^7 +2^0
			
			#It treats the value as 65 * 65 and gets the result as 4225.
			#Since 4225's binary value is within 32 bits, it does not
			#generate overflow.
			
			la		$a0,	Prompt			#Prints display msg
			li		$v0,	4
			syscall
			move 	$a0,	$t4				
			li		$v0,	1
			syscall
			
#############################################################			
			div 	$t4, 	$t1,$t0			#Decimal value is 536870912
			
			#Binary value is 001000....0000
			#The value is from -2^31 / -2^2 = 2^(31-2) = 2^29 = 001000....0000
			
			la		$a0,	Prompt			#Prints display msg
			li		$v0,	4
			syscall
			move 	$a0,	$t4				
			li		$v0,	1
			syscall

#############################################################			
			div 	$t4, 	$t3,$t0			#Decimal value is -16
			
			#Binary value is 1111.....110000
			#The value is from 65/-4 = -16 with the remainder of 1

			la		$a0,	Prompt			#Prints display msg
			li		$v0,	4
			syscall
			move 	$a0,	$t4				
			li		$v0,	1
			syscall

#############################################################			
			divu 	$t4, 	$t1,$t0			#Decimal value is 0
			
			#Binary value is 0000....0000
			#The division is 2147483648/4294967292 in unsigned, and
			#with the bits being smaller, integer division will return 0
			#The Remainder is 2147483644
			
			la		$a0,	Prompt			#Prints display msg
			li		$v0,	4
			syscall
			move 	$a0,	$t4				
			li		$v0,	1
			syscall
			
#############################################################			
			sub  	$t4, 	$t1,$t0			#Decimal value is -2147483644
			
			#Binary value is 1000...0100
			#Value will not overflow with negative number subtracting a negative number,
			#meaning negative value adding positive value will not generate overflow.
			#-2147483648 - -4 = -2147483644
			
			la		$a0,	Prompt			#Prints display msg
			li		$v0,	4
			syscall
			move 	$a0,	$t4				
			li		$v0,	1
			syscall
			
#############################################################			
			subu  	$t4, 	$t1,$t0			#Decimal value is -2147483644
			
			#Binary value is 1000...0100
			#Value is in its unsigned value: 2147483648 - 4294967292 = -2147483644
			#Since -2147483644 is within 32 bits, it is within range and it does
			#not generate overflow.
			
			la		$a0,	Prompt			#Prints display msg
			li		$v0,	4
			syscall
			move 	$a0,	$t4				
			li		$v0,	1
			syscall
			
#############################################################			
			mult 	$t1,	$t2
			
			#Decimal value in HIGH Register is -536870912
			#Decimal value in LOW Register is 0
			
			#The combination value of the two decimal is -2305843009213693952
			
			#The Binary value of HIGH is 1110.....0000
			#The Binary value of LOW is  0000.....0000
			
			#The combined binary value is 1110.........0000
			#The value is very large which the upper half 32 bit is moved 
			#into the HIGH register and it is storing 1110...0000, while the
			#lower 32 bits is in the LOW register and it is storing 0000...0000
			
			la		$a0,	PromptH			#Prints display msg
			li		$v0,	4
			syscall
			mfhi 	$a0					
			li		$v0,	1
			syscall
						
			la		$a0,	PromptL			#Prints display msg
			li		$v0,	4
			syscall
			mflo 	$a0					
			li		$v0,	1
			syscall
			
#############################################################				
			multu 	$t0, 	$t3 
						
			#Decimal value in HIGH Register is 64
			#Decimal value in LOW Register is -260
			
			#The combination value of the two decimal is 279172873980
			
			#The Binary value of HIGH is 0000.....1000000
			#The Binary value of LOW is  1111...1111011111100
			
			#The combined binary value is 0000....1000000111....11011111100
			#Because the this is an unsigned multiplication, the value $t0
			#hold the decimal value of 4294967292 rather than 4.
			#4294967292 * 65 = 279172873980, which that value is split into
			#HIGH and LOW register values.
			
			la		$a0,	PromptH			#Prints display msg
			li		$v0,	4
			syscall
			mfhi 	$a0					
			li		$v0,	1
			syscall
						
			la		$a0,	PromptL			#Prints display msg
			li		$v0,	4
			syscall
			mflo 	$a0					
			li		$v0,	1
			syscall
			
#############################################################			
			li $v0,	10
			syscall
